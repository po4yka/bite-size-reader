name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read
  packages: write
  pull-requests: read

jobs:
  prepare-environment:
    name: Prepare dependencies
    runs-on: ubuntu-latest
    outputs:
      lock_drift: ${{ steps.lockcheck.outputs.drift }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install uv (fast Python package manager)
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.17"
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Compile locked requirements (runtime)
        run: uv pip compile pyproject.toml -o requirements.txt

      - name: Compile locked requirements (dev)
        run: uv pip compile --extra dev pyproject.toml -o requirements-dev.txt

      - name: Check lockfile drift
        id: lockcheck
        run: |
          if git diff --quiet requirements.txt requirements-dev.txt; then
            echo "drift=false" >> "$GITHUB_OUTPUT"
            echo "No lockfile drift detected."
          else
            echo "drift=true" >> "$GITHUB_OUTPUT"
            echo "::warning::Lockfiles are out of date. Run 'make lock-uv' locally or trigger 'Update Lockfiles' workflow."
          fi

      - name: Upload compiled requirements
        uses: actions/upload-artifact@v4
        with:
          name: compiled-requirements
          path: |
            requirements.txt
            requirements-dev.txt

  build-and-check:
    needs: prepare-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
        pydantic: [true, false]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download compiled requirements
        uses: actions/download-artifact@v4
        with:
          name: compiled-requirements
          path: .

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv (fast Python package manager)
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.17"
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Install dependencies
        run: uv pip sync --system requirements.txt requirements-dev.txt

      - name: Remove Pydantic for no-pydantic matrix case
        if: ${{ matrix.pydantic == false }}
        run: |
          uv pip uninstall --system -y pydantic || true

      - name: Verify Pydantic availability
        run: |
          python - <<'PY'
          try:
              import pydantic  # type: ignore
              print("Pydantic: present")
          except Exception:
              print("Pydantic: absent")
          PY

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (ruff)
        run: ruff format --check .

      - name: Import sort check (isort)
        run: isort --check-only .

      - name: Type check (mypy)
        run: mypy app tests

      - name: Run tests
        run: python -m unittest discover -s tests -p "test_*.py" -v

      - name: Surface lockfile drift status
        if: ${{ needs.prepare-environment.outputs.lock_drift == 'true' && matrix.pydantic }}
        run: echo "::warning::Lockfiles are out of date. Run 'make lock-uv' locally or trigger 'Update Lockfiles' workflow."

  docker-image:
    needs: build-and-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: ${{ github.event_name != 'pull_request' && vars.PUBLISH_DOCKER == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=long

      - name: Build (and optionally push) Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' && vars.PUBLISH_DOCKER == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    needs: prepare-environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Download compiled requirements
        uses: actions/download-artifact@v4
        with:
          name: compiled-requirements
          path: .

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv (fast Python package manager)
        uses: astral-sh/setup-uv@v4
        with:
          version: "0.8.17"
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml
            uv.lock

      - name: Install project and security tools
        run: |
          uv pip sync --system requirements.txt requirements-dev.txt
          uv pip install --system bandit pip-audit safety

      - name: Bandit (SAST)
        run: bandit -r app -ll

      - name: pip-audit (dependencies)
        run: |
          # Filter out spaCy language models that aren't available on PyPI
          cat requirements.txt requirements-dev.txt | \
            grep -v "en-core-web-sm" | \
            grep -v "ru-core-news-sm" | \
            sort -u > requirements-audit.txt

          # Add base spaCy and textacy packages for auditing
          echo "spacy>=3.7,<4" >> requirements-audit.txt
          echo "textacy>=0.13,<0.14" >> requirements-audit.txt

          # Run security audit on PyPI packages only
          pip-audit -r requirements-audit.txt --strict

      - name: Safety (dependencies)
        run: safety check --full-report || true

  secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Gitleaks (workspace)
        if: ${{ github.event_name == 'pull_request' }}
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --source . --no-git --redact --verbose --report-format sarif --report-path results-workspace.sarif

      - name: Gitleaks (history)
        if: ${{ github.event_name != 'pull_request' }}
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --redact --verbose --report-format sarif --report-path results-history.sarif
